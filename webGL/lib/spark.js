// Generated by CoffeeScript 1.7.1
var Spark,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Spark = (function(_super) {
  __extends(Spark, _super);


  /* Constructs a Spark and puts it into board b
     @param b - the board this spark belongs to
     @param l - the location of this spark in (row, col) in the board
     @param colors - the colors of this spark, in clockwise order starting with the top. Can be null, then set later.
     @throws IllegalArgumentException - if there is already hex at row,col, or row,col is OOB, or if colors is nonnull and length == 0.
   */

  function Spark(board, loc, colors) {
    Spark.__super__.constructor.call(this, board, loc);
    this.setAvailableColors(colors);
  }


  /* Returns the current color of this spark */

  Spark.prototype.getColor = function() {
    return this.avaliableColors.getColor();
  };


  /* Makes this spark use the next avaliable color. Relights and redraws */

  Spark.prototype.useNextColor = function() {
    this.avaliableColors = this.avaliableColors.getNext();
    this.light();
    this.update();
  };


  /* Returns the avaliable colors of this spark. */

  Spark.prototype.getAvaliableColors = function() {
    return this.avaliableColors.toArray();
  };


  /*Allows setting the ColorCircle, but only if it isn't set yet (is null).
      @throws IllegalArgumentException if the colorCircle is currently non-null
   */

  Spark.prototype.setAvaliableColors = function(colors) {
    if (this.avaliableColors !== null) {
      throw new IllegalArgumentException("Can't set colorCirle of " + this);
    }
    if (colors !== null && colors.length === 0) {
      throw new IllegalArgumentException("Can't set color array of size " + colors.length);
    }
    this.avaliableColors = ColorCircle.fromArray(colors);
    this.light();
    this.update();
  };


  /* @Override
      Sparks always find light because they always light themselves. No setting of fields neccesary
   */

  Spark.prototype.light = function() {
    this.stopProvidingLight();
    this.provideLight();
  };


  /* @Override
      Default behavior for a spark is to switch to the next avaliable color
   */

  Spark.prototype.click = function() {
    this.useNextColor();
  };


  /* @Override
      Overrides Hex isLit() because Sparks are always lit
   */

  Spark.prototype.isLit = function() {
    var l;
    l = [];
    l.push(this.getColor());
    return l;
  };

  return Spark;

})(Hex);
