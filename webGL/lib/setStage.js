// Generated by CoffeeScript 1.7.1

/* Begins init processing */

(function() {
  this.init = function() {
    return this.initStart();
  };


  /* Set up a PIXI stage - part before asset loading */

  this.initStart = function() {
    var margin;
    this.stage = new PIXI.Stage(0x295266, true);
    margin = 20;
    this.renderer = PIXI.autoDetectRenderer(window.innerWidth - margin, window.innerHeight - margin);
    PIXI.scaleModes.DEFAULT = PIXI.scaleModes.NEAREST;
    this.container = new PIXI.DisplayObjectContainer();
    this.stage.addChild(this.container);
    PIXI.scaleModes.DEFAULT = PIXI.scaleModes.LINEAR;
    preloadImages();
  };


  /* Load assets into cache */

  this.preloadImages = function() {
    var assets, loader;
    assets = ["assets/img/hex-back.png", "assets/img/hex-lit.png", "assets/img/circle_blue.png", "assets/img/circle_red.png", "assets/img/circle_green.png"];
    loader = new PIXI.AssetLoader(assets);
    loader.onComplete = this.initFinish;
    loader.load();
  };


  /* Resizes the stage correctly */

  this.resize = function() {
    var margin, scale;
    margin = 20;
    window.renderer.resize(window.innerWidth - margin, window.innerHeight - margin);
    scale = (1 / 120) * Math.min(window.innerHeight / window.BOARD.getHeight() / 1.1, window.innerWidth * 1.15 / window.BOARD.getWidth());
    window.container.scale.x = scale;
    window.container.scale.y = scale;
  };


  /* Detect when the window is resized - jquery ftw! */

  window.onresize = function() {
    return window.resize();
  };


  /* Finish initing after assets are loaded */

  this.initFinish = function() {
    var animate;
    animate = function() {
      var col, h, i, inc, radTo60Degree, rotSpeed, tex, tolerance, _i, _j, _len, _ref, _ref1;
      rotSpeed = 1 / 10;
      tolerance = 0.000001;
      radTo60Degree = 1.04719755;
      if ((this.BOARD != null)) {
        _ref = this.BOARD.allHexes();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          h = _ref[_i];
          if (h.isLit().length > 0 && !h.panel.children[0].lit) {
            h.panel.children[0].texture = PIXI.Texture.fromImage("assets/img/hex-lit.png");
            h.panel.children[0].lit = true;
          }
          if (h.isLit().length === 0 && h.panel.children[0].lit) {
            h.panel.children[0].texture = PIXI.Texture.fromImage("assets/img/hex-back.png");
            h.panel.children[0].lit = false;
          }

          /* Rotation of a prism - finds a prism that wants to rotate and rotates it a bit.
              If this is the first notification that this prism wants to rotate, stops providing light.
              If the prism is now done rotating, starts providing light again
           */
          if (h instanceof Prism && h.currentRotation !== h.targetRotation) {
            if (h.canLight) {
              h.canLight = false;
              h.light();
            }
            inc = (h.targetRotation - h.prevRotation) * rotSpeed;
            h.panel.rotation += inc * radTo60Degree;
            h.currentRotation += inc;
            if (Math.abs(h.targetRotation - h.currentRotation) < tolerance) {
              inc = h.targetRotation - h.currentRotation;
              h.panel.rotation += inc * radTo60Degree;
              h.currentRotation += inc;
              h.prevRotation = h.currentRotation;
              h.canLight = true;
              h.light();
            }
          }
          if (h instanceof Spark && h.toColor !== "") {
            col = !isNaN(h.toColor) ? Color.asString(h.toColor) : h.toColor;
            tex = PIXI.Texture.fromImage("assets/img/circle_" + col + ".png");
            for (i = _j = 1, _ref1 = Hex.SIDES; _j <= _ref1; i = _j += 1) {
              h.panel.children[i].texture = tex;
            }
            h.toColor = "";
          }
        }
      }
      requestAnimFrame(animate);
      this.renderer.render(this.stage);
    };
    requestAnimFrame(animate);
    this.BOARD = new Board();
    Board.loadBoard("board1");
  };


  /* Called when the board is loaded */

  this.onBoardLoad = function() {
    window.BOARD.relight();
    document.body.appendChild(renderer.view);
    window.resize();
    return window.drawBoard();
  };


  /* Creates a dummy board and adds to scope. Mainly for testing */

  this.createDummyBoard = function() {
    this.BOARD = this.Board.makeBoard(4, 12, 3);
    this.onBoardLoad();
  };


  /* Draws the Board in BOARD on the stage. */

  this.drawBoard = function() {
    var h, _i, _len, _ref;
    _ref = this.BOARD.allHexes();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      h = _ref[_i];
      this.createSpriteForHex(h);
    }
  };

  this.hexRad = 110;


  /* Creates a single sprite for a hex and adds it to stage */

  this.createSpriteForHex = function(hex) {
    var c, cr, i, nudge, panel, point, shrink, spr, _i, _ref;
    if (typeof hex.panel === "undefined" || hex.panel === null) {
      panel = new PIXI.DisplayObjectContainer();
      panel.position.x = hex.loc.col * this.hexRad * 3 / 4 * 1.11 + this.hexRad * (5 / 8);
      panel.position.y = hex.loc.row * this.hexRad + this.hexRad * (5 / 8);
      if (hex.loc.col % 2 === 1) {
        panel.position.y += this.hexRad / 2;
      }
      panel.pivot.x = 0.5;
      panel.pivot.y = 0.5;
      spr = PIXI.Sprite.fromImage("assets/img/hex-back.png");
      spr.lit = false;
      spr.anchor.x = 0.5;
      spr.anchor.y = 0.5;
      panel.addChild(spr);
      panel.hex = spr;
      for (i = _i = 0, _ref = Hex.SIDES - 1; _i <= _ref; i = _i += 1) {
        c = hex.colorOfSide(i);
        if (!isNaN(c)) {
          c = Color.asString(c);
        }
        nudge = 0.54;
        shrink = 8;
        point = new PIXI.Point((this.hexRad / 2 - shrink) * Math.cos((i - 2) * 2 * Math.PI / Hex.SIDES + nudge), (this.hexRad / 2 - shrink) * Math.sin((i - 2) * 2 * Math.PI / Hex.SIDES + nudge));
        cr = PIXI.Sprite.fromImage("assets/img/circle_" + c.toLowerCase() + ".png");
        cr.anchor.x = 0.5;
        cr.anchor.y = 0.5;
        cr.scale.x = 0.15;
        cr.scale.y = 0.15;
        cr.position.x = point.x;
        cr.position.y = point.y;
        panel.addChild(cr);
      }
      hex.panel = panel;
      panel.hex = hex;
      panel.interactive = true;
      panel.click = function() {
        hex.click();
      };
      this.container.addChild(panel);
    }
    return hex.panel;
  };

}).call(this);
