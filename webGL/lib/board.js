// Generated by CoffeeScript 1.7.1
var Board,
  __modulo = function(a, b) { return (a % b + +b) % b; };

Board = (function() {

  /* Constructor for an empty board of size rs*cs */
  function Board(rs, cs) {
    var c, r, _i, _j, _ref, _ref1;
    if (rs < 0 || cs < 0) {
      throw new IllegalArgumentException("Illegal Board Construction for Dimensions " + rs + ", " + cs);
    }
    this.height = rs;
    this.width = cs;
    this.board = [];
    for (r = _i = 0, _ref = rs - 1; _i <= _ref; r = _i += 1) {
      this.board.push([]);
      for (c = _j = 0, _ref1 = cs - 1; _j <= _ref1; c = _j += 1) {
        this.board[r].push(null);
      }
    }
    this.game = null;
  }


  /* Returns the height of this board */

  Board.prototype.getHeight = function() {
    return this.height;
  };


  /* Returns the width of this board */

  Board.prototype.getWidth = function() {
    return this.width;
  };


  /* Returns the game this board belongs to (if any) */

  Board.prototype.getGame = function() {
    return this.game;
  };


  /* Sets the game this board belongs to. Throws a runtime exception if game is already set */

  Board.prototype.setGame = function(g) {
    if (this.game !== null) {
      throw new RuntimeException("Can't set Game of " + this + " to " + g + " because it is already " + game);
    }
    this.game = g;
  };


  /* Gets rid of this board - signifies that it is no longer used */

  Board.prototype.dispose = function() {
    this.game = null;
    this.board = null;
  };


  /* Returns the index (0 ... Hex.SIDES - 1) of the side of h1 that is facing h2. 
      Returns -1 if either are null or are not neighbors
   */

  Board.prototype.indexLink = function(h1, h2) {
    var h1Neighbors, i, _i, _ref;
    if (h1 === null || h2 === null) {
      return -1;
    }
    h1Neighbors = h1.getNeighborsWithBlanks();
    for (i = _i = 0, _ref = Hex.SIDES; _i <= _ref; i = _i += 1) {
      if (h2 === h1Neighbors[i]) {
        return i;
      }
    }
    return -1;
  };


  /* Returns the color that links h1 and h2. 
      Returns none if either is null or they are not neighbors, or they are not color linked
   */

  Board.prototype.colorLinked = function(h1, h2) {
    var c1, c2, index;
    index = this.indexLink(h1, h2);
    if (index === -1) {
      return Color.NONE;
    }
    c1 = h1.colorOfSide(index);
    c2 = h2.colorOfSide(__modulo(index + Hex.SIDES / 2, Hex.SIDES));
    if (c1 === c2) {
      return c1;
    } else {
      return Color.NONE;
    }
  };


  /* Returns the hex at the given location */

  Board.prototype.getHex = function(loc) {
    return this.getHex(loc.row, loc.col);
  };


  /* Returns the hex at the given row, col */

  Board.prototype.getHex = function(row, col) {
    return this.board[row][col];
  };


  /* Returns a flattened version of the board - all hexes in no particular order */

  Board.prototype.allHexes = function() {
    var a, arr, h, _i, _j, _len, _len1, _ref;
    arr = [];
    _ref = this.board;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      for (_j = 0, _len1 = a.length; _j < _len1; _j++) {
        h = a[_j];
        arr.push(h);
      }
    }
    return arr;
  };


  /* Sets the hex at position (r,c). Also sets all neighbor hexes as needing a neighbor update.
      Hex must have this as its board. Used in hex construciton, not much elsewhere
   */

  Board.prototype.setHex = function(h, r, c) {
    var n, _i, _len, _ref;
    if (h.board !== this) {
      throw new IllegalArgumentException("Can't put hex belonging to " + h.board + " in board " + this);
    }
    this.board[r][c] = h;
    _ref = h.getNeighbors();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      n = _ref[_i];
      n.neighborsUpdated = true;
    }
  };

  return Board;

})();

({

  /* Re-calculates light on whole board */
  relight: function() {
    var h, _i, _len, _ref;
    _ref = this.allHexes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      h = _ref[_i];
      h.light();
    }
  },

  /* Two boards are equal if they have the same board */
  equals: function(o) {
    var b;
    if (!(o instanceof Board)) {
      return false;
    }
    b = Board(o);
    return b.board === this.board;
  }
});
