// Generated by CoffeeScript 1.7.1
var Crystal,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Crystal = (function(_super) {
  __extends(Crystal, _super);


  /* Constructs a Crystal and puts it into board b
      @param b - the board this spark belongs to
      @param l - the location of this crystal in (row, col) in the board
      @throws IllegalArgumentException - if there is already hex at row,col, or row,col is OOB.
   */

  function Crystal(board, loc) {
    Crystal.__super__.constructor.call(this, board, loc);
    this.lit = Color.NONE;
  }


  /* @Override
      Try to find light like a prism, but don't ever provide light. Thus only look for a provider, don't need to recurse.
      Only find single light color.
   */

  Crystal.prototype.light = function() {
    var lighterChanged, lit;
    lighterChanged = this.pruneLighters();
    if (lighterChanged) {
      this.findLightProviders(lit);
      if (this.isLit().length === 0) {
        this.findLightProviders(Color.NONE);
      }
    }
    if (this.isLit().length === 0) {
      lit = Color.NONE;
    } else {
      lit = this.isLit()[0];
    }
    update();
  };


  /* @Override
      Helper method for use in findLight implementations. Tries to find light among neighbors.
      Overrides hex findLightProvider so that it can take any color of light, no matter the side color.
      Only looks for preferred. If preferred is NONE, takes any color. Only takes on e color
   */

  Crystal.prototype.findLightProviders = function(preferred) {
    var c, h, hLit, _i, _len, _ref;
    _ref = this.getNeighbors();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      h = _ref[_i];
      hLit = h.isLit();
      c = h.colorOfSide(h.indexLink(this));
      if ((hLit.length > 0 && (preferred === Color.NONE || preferred in hLit)) && c in hLit) {
        lighters[h.loc] = c;
        return;
      }
    }
  };


  /* @Override
      All sides of this crystal are the color of its lighter. (Not that this can provide light)
   */

  Crystal.prototype.colorOfSide = function(n) {
    if (n < 0 || n > Hex.SIDES - 1) {
      throw new IllegalArgumentException("Can't find color of side " + n + " of " + this);
    }
    return lit;
  };


  /* Interacting with a Crystal does nothing - do nothing here */

  Crystal.prototype.click = function() {};

  return Crystal;

})(Hex);
